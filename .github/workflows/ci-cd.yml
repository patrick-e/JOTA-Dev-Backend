name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: 1234
          POSTGRES_USER: admin
          POSTGRES_DB: admin
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379

      mongo:
        image: mongo:6
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-django coverage

    - name: Set up project structure
      run: |
        mkdir -p JOTA/static

    - name: Run linting
      run: |
        flake8 JOTA --count --max-line-length=127 --statistics

    - name: Check PostgreSQL connection
      run: |
        echo "Verificando conexão com o PostgreSQL..."
        for i in {1..10}; do
          if pg_isready -h 127.0.0.1 -p 5432; then
            echo "PostgreSQL está pronto!"
            break
          fi
          echo "Aguardando PostgreSQL (tentativa $i)..."
          sleep 5
        done
        if ! pg_isready -h 127.0.0.1 -p 5432; then
          echo "PostgreSQL não está acessível após várias tentativas."
          exit 1
        fi

    - name: Apply migrations
      run: |
        python JOTA/manage.py makemigrations
        python JOTA/manage.py migrate

    - name: Log PostgreSQL databases
      run: |
        psql -h 127.0.0.1 -p 5432 -U admin -c "\l"
      env:
        PGPASSWORD: 1234

    - name: Run tests
      env:
        DATABASE_URL: postgres://admin:1234@127.0.0.1:5432/admin
        DJANGO_SETTINGS_MODULE: JOTA.settings
        SECRET_KEY: test-key
      run: |
        python JOTA/manage.py test editor
        python JOTA/manage.py test user
        
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t jota-api .
        docker tag jota-api jota-api:${{ github.sha }}

    - name: Save Docker image
      run: docker save jota-api:${{ github.sha }} > jota-api.tar

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: jota-api.tar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Load Docker image
      run: docker load < jota-api.tar

    - name: Deploy (Simulado)
      run: |
        echo "Iniciando deploy simulado..."
        echo "Imagem: jota-api:${{ github.sha }}"
        echo "Deploy concluído com sucesso!"
